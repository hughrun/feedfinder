<?xml version="1.0" encoding="UTF-8" ?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>
    Information Flaneur
    </title>
    <description>
    A blog about libraries, computer programming, and the impending end of humanity.
    </description>
    <link>https://www.hughrundle.net</link>
    <generator>Eleventy</generator>
    <lastBuildDate> Sat, 22 Jun 2019 04:51:56 GMT </lastBuildDate>
    <atom:link href="https://www.hughrundle.net/rss" rel="self" type="application/rss+xml"/>
    <ttl>60</ttl>
      <item>
        <title>
        2018 in review
        </title>
        <dc:creator>
        Hugh Rundle
        </dc:creator>
        <link>
        https://www.hughrundle.net/2018-in-review/
        </link>
        <guid isPermaLink="true">https://www.hughrundle.net/2018-in-review/</guid>
        <pubDate>Sun, 30 Dec 2018 09:24:16 GMT</pubDate>
        <description>
              <![CDATA[ On reflection, 2018 was a big year for me. ]]>
        </description>
        <content:encoded>
        <![CDATA[ <p>Inspired by others I'm taking stock of my 2018. I don't tend to count things like how many books I read, but it's good to reflect on where you've been before checking where you're heading. I felt a bit like not much happened in my life this year, but on reflection that's laughable.</p>
<p>In <strong>January</strong> I spent a couple of weeks in Singapore, which I didn't really know a great deal about prior to our visit. Whilst Singapore certainly has elements of authoritarianism, I was intrigued by the Singaporean approach to 'multiculturalism' compared with Australia. The uncomfortable feeling I experienced seeing familiar British imperial architecture as - well, imperial architecture - stayed with me when I returned home. It seems odd to write that visting Singapore made me much more conscious of the continuing physical (and therefore mental) presence of British Imperialism in present-day Australia, but it did. Perhaps it was also the cumulative impact of four years of First World War <s>nostalgia</s> 'commemoration', but on a visit to Daylesford's Wombat Hill Botanical Gardens later in the year I was overwhelmed by the sense that all of it - &quot;Pioneers' Memorial Tower&quot;, the nineteenth-century rotunda, and the cannons placed about the hill (captured as war booty at various times) - was a bit grotesque.</p>
<p>I also delivered a talk and participated in some great conversations about 'generous GLAM' <a href="https://www.hughrundle.net/2018/01/29/generous-glam/">at LinuxConfAU</a>.</p>
<p>In <strong>February</strong> I had the enormous pleasure of introducing Angela Galvan for <a href="https://webcast.gigtv.com.au/Mediasite/Showcase/vala2018/Presentation/31066bb7c4bc483a8647dc496b4c68181d">her keynote</a> <em>The revolution will not be standardized</em> at the VALA 2018 conference. Then I got to visit <a href="https://acca.melbourne/exhibition/unfinished-business-perspectives-on-feminism-and-art">ACCA's <em>Unfinished Business</em> exhibition</a> with Angela, her sister, and Andrew Kelly. That was a pretty good week.</p>
<p>In <strong>March</strong> and <strong>April</strong> I learned how <a href="https://reactjs.org/">React</a> works and even wrote a little demo app, but I have to say I didn't love it and I'm not convinced it's needed in all, or perhaps even most of the places you'll find it being used. The experience did make me a bit more confident with my coding - I worked my way through the book I was learning from, created an app that worked the way I wanted it to and understood how it was working. I just ...don't <em>like</em> React. Especially the bit where you write JavaScript to create CSS 😒.</p>
<p>In <strong>May</strong> I set up my own <a href="https://joinmastodon.org/">Mastodon</a> instance at <a href="https://ausglam.space/about">ausglam.space</a>. You should join.</p>
<p>In <strong>June</strong> I left local government and public libraries to take up a completely new role supporting librarians in the Academic sector. I now work four days a week and cannot recommend this strongly enough. It's had a huge impact on my stress levels, given me more perspective about what's important to me, and made me somewhat less insufferable to be around. Whilst it's certainly not possible for everyone, I'm convinced most people can afford and would be happier to work four days on 80% of the income they get working five days  - if only more employers offered the option.</p>
<p>I had three weeks between jobs in <strong>July</strong>, and took the opportunity to think about life more broadly. I wanted to use social media - particularly Twitter - less, but still share links to and thoughts about things I was reading, listening to and watching. I was also a bit sick of my typical 'man pontificating' blogging style, so was looking to do something different with my blog. Thus <a href="https://www.hughrundle.net/2018/07/15/marginalia-1/">Marginalia was born</a>. Despite being unemployed for most of the month, I also managed to attend two conferences in July: <a href="https://ti.to/levels/2018">Levels</a>, which ironically made me more comfortable with coding just for my own amusement rather than needing it to be a career move; and <a href="https://aplic.alia.org.au/">APLIC</a>, which stretched into <strong>August</strong> and was my first conference standing on a vendor booth - causing a few double-takes.</p>
<p>In <strong>September</strong> I tested the static site generator <a href="https://www.11ty.io/">Eleventy</a> and liked what I saw, spending the next two months setting it up and migrating my blog from Ghost to Eleventy.</p>
<p>In <strong>November</strong> I published <a href="https://www.npmjs.com/package/writenow">my first npm package</a> - a command-line program that creates a template, including stock image for social media posts, for static-site publishing (e.g. with Eleventy). It appears to have had some downloads on npm, though the stats are a bit opaque as to whether it's automated bots or real humans doing the downloading.</p>
<p>In <strong>December</strong> I started learning Python and created my first couple of scripts. Not at all coincidentally, <a href="https://github.com/hughrun/ephemetoot">one of these</a> auto-deletes Mastodon toots after a certain period of time, and I also used someone else's script to do the same thing with Twitter. I make an effort to keep my blog posts available and their URLs permanent, but social media is <em>supposed</em> to be ephemeral, and I'm increasingly uncomfortable with the idea of it all being there waiting to be read without context some time in the future. I'm continuing to learn more Python, both by making my way slowly through the 1500 page door-stopper <em>Learning Python</em> and also by migrating the code that runs <a href="https://glamblogs.newcardigan.org">Aus GLAM Blogs</a> from node/Meteor to Python.</p>
<p>Counting this one, I've published eighteen blog posts this year, which I'm surprised by, given I didn't manage to post every month for GLAM Blog Club. According to <a href="https://getpocket.com">Pocket</a>, I also read the equivalent of 96 books worth of articles on the web - which partially explains why I read a lot fewer <em>actual</em> books than that! World politics is a dumpster fire, but personally I'm feeling happier than I have been for some time, and I'm looking forward to seeing what 2019 brings. I'm expecting a lot more reading, coding, writing, and time to think, and maybe even a bit more exercise. But perhaps that's the Christmas pudding talking.</p>
 ]]>
        </content:encoded>
      </item>
      <item>
        <title>
        Loving libraries IRL
        </title>
        <dc:creator>
        Hugh Rundle
        </dc:creator>
        <link>
        https://www.hughrundle.net/loving-libraries-irl/
        </link>
        <guid isPermaLink="true">https://www.hughrundle.net/loving-libraries-irl/</guid>
          <category domain="https://www.hughrundle.net/tag">
          glam blog club
          </category>
        <pubDate>Tue, 26 Feb 2019 21:04:26 GMT</pubDate>
        <description>
              <![CDATA[ When newCardigan visited Incendium Radical Library, we were asked &quot;Why do you love libraries?&quot; It was a provocative question. ]]>
        </description>
        <content:encoded>
        <![CDATA[ <p>Tilly's face fell. &quot;Oh&quot;, she paused, looking apologetic.</p>
<p>The cardiParty at <a href="https://incendiumradicallibrary.wordpress.com">Incendium Radical Library</a> (playfully abbreviated as IRL) in West Footscray had just ended, and we were working our way through a box of books I'd offered to donate. IRL is, officially, just the shelves along one wall of the IRL Infoshop, but the guests from newCardigan pushed back a little on this, seeing the activities of the Library and the Infoshop as a seamless whole - just as public libraries run storytime, provide internet access and also lend books. Anne-lise from IRL asked us to each tell the group &quot;Why you love libraries&quot;. When my turn arrived, my head was still spinning from the audacity of the question. <em>Do</em> I love libraries? Why did Anne-lise assume we all loved libraries? Should I love libraries? What if I said I don't? Was this a trick question? I mumbled something incoherent and set up a false dichotomy with archives, whilst Michaela glared at me in her 'Archivists against history repeating itself' t-shirt. I wished not for the first time that I could be a silent bystander at a cardiParty - or if that wasn't possible then at least be swallowed up by the earth.</p>
<p>But &quot;Why do you love libraries?&quot; was a great provocation. It's a ridiculous question to ask librarians, which I realised later is probably why Anne-lise asked it. Asking a group mostly consisting of librarians why they love libraries is like asking people why they love their families. A few might say they don't, particularly, but this provocation is much more interesting than the question that occassionally gets thrown at librarians who dare to apply critical theory to library practices. &quot;Why do you <em>hate</em> libraries?&quot; sounds like the opposite question, and perhaps it is: but not in a straightforward sense. <em>Why do you hate libraries?</em> is an accusation - underlaid with an assumption that if you don't profess unconditional love you are expressing hate. It assumes that you <em>should</em> love libraries. That they are beyond criticism or reproach. <em>Why do you love libraries?</em> is an open invitation to say whatever you want: maybe even to say &quot;I don't&quot;. It was such a simple question, and yet, despite (or perhaps because) my first attempt to answer it was so poor, I've been thinking about it ever since. One can love one's family and still see their flaws. Families that love each other fight, and bicker, and hold grudges, and embarrass each other. But they also forgive, and support each other, and show their love by helping each other to be better people individually and together.</p>
<p>I do love libraries. I find them mesmerising and wonderful, frustrating and painful, inspiring and embarrassing, awful and awe full. Libraries and librarians in all their various incarnations are some of the greatest examples of human creativity and ingenuity. They are also sometimes some of the most frustrating examples of conservatism and intransigence. Libraries are large; they contain multitudes.</p>
<p>When I was between paid jobs in July I weeded my personal library. Out went everything I had read but knew I'd never read again, and everything I hadn't read and was never going to. Most of the discards went to <a href="https://www.brotherhoodbooks.org.au">Brotherhood Books</a>, but I set aside a box for Incendium - some introductory maybe-capitalism-isn't-so-great-after-all texts, some early Naomi Klein, as well as the sort of books I felt I <em>should</em> read if I was to uphold any sort of inner-city lefty credibility - Beaudrillard and a couple of other <a href="http://semiotexte.com">Semiotext</a> volumes. I hadn't really understood much of anything in these last ones, of course, so I was passing them on to others who perhaps might glean something more. It was one of these that Tilly was frowning at. A big, chunky thing with densely packed text, by a philosopher who delights in courting controversy but has been accused of not really having much to say. I hadn't opened it in the two years it sat on my shelf, and as both the man and his writing became increasingly problematic, I realised I never would. Being unapologetically selective about what goes into the IRL collection, Tilly gently placed it in the &quot;free books&quot; box rather than the to-be-catalogued pile.</p>
<p>The small team that keep IRL running do so on a pile of donations. Donated time (mostly their own); donated books (some having migrated through four anarchist and radical libraries); a donated building, and donated money. But it was their ethic of care that struck me forcefully as Tilly and Anne-lise talked about their work building and maintaining IRL. The thought and consideration they put into how they build the collection, the effect any given title might have on the people they want to welcome to IRL, and how they can make the space itself welcoming and safe was obvious and inspiring. They're not professionally trained, but they're certainly librarians.</p>
<p>It's a library that is full of love.</p>
 ]]>
        </content:encoded>
      </item>
      <item>
        <title>
        I accidentally built a serendipity machine
        </title>
        <dc:creator>
        Hugh Rundle
        </dc:creator>
        <link>
        https://www.hughrundle.net/i-accidentally-built-a-serendipity-machine/
        </link>
        <guid isPermaLink="true">https://www.hughrundle.net/i-accidentally-built-a-serendipity-machine/</guid>
          <category domain="https://www.hughrundle.net/tag">
          glam blog club
          </category>
        <pubDate>Sun, 03 Mar 2019 02:47:03 GMT</pubDate>
        <description>
              <![CDATA[ I didn&#x27;t mean to make a little serendipity machine, but it seems that whilst I was just trying to make something to keep my brain a little quieter, that&#x27;s exactly what I built. ]]>
        </description>
        <content:encoded>
        <![CDATA[ <p>I love using <a href="https://getpocket.com">Pocket</a> - the service once known as 'Read it Later' and now owned by Mozilla. Pretty much anything I see on social media or the web that looks like it might be interesting and take longer than 30 seconds to read goes into my Pocket account. Taking advantage of the Pocket API, I've also <a href="https://glamblogs.newcardigan.org/pocket">integrated it into Aus GLAM Blogs</a>, <a href="https://github.com/hughrun/empocketer">experimented</a> with doing the same thing for <em>any</em> RSS feed, and created a <a href="https://github.com/hughrun/pickpocket">script to deduplicate items in a Pocket list</a>.</p>
<p>My latest Pocket project is called <a href="https://github.com/hughrun/pocket-snack"><code>pocket-snack</code></a> and was born out of a conversation I had with my comrade and fellow Pocket-lover <a href="https://lissertations.net">lissertations</a>. We both faced the same dilemma a gore-loving Netflix account holder has: overwhelmed by so much choice, it's difficult to choose any one item. So our Pockets continued to fill up, the dread of opening them grew, and the anxiety caused by all that unread material hovered. This is a familiar problem for those with over-large <em>physical</em> 'to be read' piles (I have one of those too), or sheds full of junk that 'might be useful one day'.</p>
<p>I came up with a solution using a Python script that tags everything in the list with <code>tbr</code>, archives the lot, and then re-adds just a small number of randomly-chosen items back into the list. Now instead of having a list of literally hundreds of unread articles from which to choose, I have a dozen or less: a sensible number that can easily be read, or at least <em>processed</em>. The list is refreshed daily, weekly, or on demand. Two things became evident once I started using <em>pocket-snack</em>:</p>
<ol>
<li>
<p>Dealing with a large group of articles by chunking it into smaller groups is surprisingly effective both at getting any traction at all, and significantly speeding up the process. It forces you to focus on just what is in front of you. I feel that this has also helped me to focus on the thing I'm reading - I've tricked my brain into thinking it's only one of 8 items rather than one of 308, so there's no need to rush or be thinking about all the others.</p>
</li>
<li>
<p>Randomly choosing from a large list of articles I have consciously bookmarked for future reading over the last several months sometimes creates serendipitous sets, or serendipitous timing. Things I bumped into online months apart but on the same topic will sometimes appear in the same 'snack'. At other times, I've been talking with friends or colleagues about a topic and a relevant article I'd forgotten about will appear. I didn't mean to make a little serendipity machine, but it seems that whilst I was just trying to make something to keep my brain a bit quieter, that's exactly what I built.</p>
</li>
</ol>
<p>You might call it serendipity.</p>
<hr>
<p><em>If you have a Mac or Linux machine with Python3 you can <a href="https://github.com/hughrun/pocket-snack/releases">download the latest release</a> of pocket-snack and use it yourself.</em></p>
 ]]>
        </content:encoded>
      </item>
      <item>
        <title>
        Things that must end (in GLAM)
        </title>
        <dc:creator>
        Hugh Rundle
        </dc:creator>
        <link>
        https://www.hughrundle.net/things-that-must-end-in-glam/
        </link>
        <guid isPermaLink="true">https://www.hughrundle.net/things-that-must-end-in-glam/</guid>
          <category domain="https://www.hughrundle.net/tag">
          glam blog club
          </category>
        <pubDate>Sun, 28 Apr 2019 02:12:13 GMT</pubDate>
        <description>
              <![CDATA[ A non-exhaustive list. ]]>
        </description>
        <content:encoded>
        <![CDATA[ <p>Requiring unpaid labour as the price of professional entry.</p>
<p>Conflating workers with institutions.</p>
<p>Lazy ahistorical justifications for the continued use of outdated descriptive metadata standards.</p>
<p>Using the needs of one particular conservative imperialist institution as the standard for describing all possible topics of human interest in the English language(s).</p>
<p>Condoning value capture by parasitic thieves claiming &quot;we're all in this together&quot;.</p>
<p>Defending cultural genocide.</p>
<p>Justifying theft.</p>
<p>Favouring privileged people's comfort over marginalised people's safety; international rockstars over local experts; credentials over knowledge; standards over meaning; consensus over action; Business School over Library School.</p>
<p>Thinking we can't do anything.</p>
<p>Saying we can do everything.</p>
<p>Diversity without justice.</p>
<p>Doing more with less.</p>
<p>Self-loathing.</p>
<p>Vocational awe.</p>
 ]]>
        </content:encoded>
      </item>
      <item>
        <title>
        Learning how much I have to learn - What I learned in 2018 and what I am hoping to start learning in 2019
        </title>
        <dc:creator>
        Hugh Rundle
        </dc:creator>
        <link>
        https://www.hughrundle.net/learning-how-much-i-have-to-learn/
        </link>
        <guid isPermaLink="true">https://www.hughrundle.net/learning-how-much-i-have-to-learn/</guid>
          <category domain="https://www.hughrundle.net/tag">
          glam blog club
          </category>
        <pubDate>Sun, 28 Apr 2019 06:18:09 GMT</pubDate>
        <description>
              <![CDATA[ A review of my learning goals in 2018 and 2019 ]]>
        </description>
        <content:encoded>
        <![CDATA[ <p>At the beginning of last year I <a href="https://www.hughrundle.net/2018/01/01/a-year-of-learning/">made a list</a> of things I wanted to learn:</p>
<ul>
<li>Koha templating and themes</li>
<li>mySQL</li>
<li>Perl</li>
<li>Unit testing</li>
<li>How to cook bagels</li>
<li>To read long texts immersively again</li>
<li>Remembering names better</li>
</ul>
<p>It's a little awkward to look at now, because i didn't make much progress on anything really except <em>learn to read long texts immersively again</em>. This is why you shouldn't make New Year Resolutions.</p>
<h2>What I did learn in 2018</h2>
<p>It's not like I learned <em>nothing</em> last year though - just not the things I though maybe I wanted to learn. Some of the things I learned in 2018 are:</p>
<ul>
<li>how to publish <a href="https://www.npmjs.com/package/writenow">a package on npm</a></li>
<li>how Git tags and Github <a href="https://github.com/hughrun/pocket-snack/releases">releases</a> work</li>
<li>how to host <a href="https://ausglam.space/about">a Mastodon instance</a> and, kinda, how Docker Compose works</li>
<li><a href="https://code.visualstudio.com/">Virtual Studio Code</a> exists and is amazing</li>
<li>the four day, 32 hour working week is significantly superior to the five day working week. (see also: <em>learn to read long texts immersively again</em>)</li>
<li>there are people working in universities whose entire job consists of trying to find out whether researchers also working at the same university have published any research papers recently. 🙃</li>
<li>some people get so much from newCardigan cardiParties that they list how many they attended in their end-of-year review blog posts!</li>
</ul>
<p>Naturally, now that I'm working with academic librarians I've also learned just how much I don't know about how academic and research librarians work - I've been surprised by how many things are really just the same as public libraries, but the differences are <em>really</em> different and things change quickly.</p>
<h2>What I'm learning in 2019</h2>
<p>These aren't really goals for learning in the next 12 months, because to varying degrees they are all life-long projects, but a short list of things I want to learn, or learn much more about, this year is:</p>
<ul>
<li>Python</li>
<li>Bash scripting</li>
<li>Australian First Nations cultural awareness - not exactly a small project, as I get older I realise how much I don't know and how much I was lied to as a child</li>
<li>how to shut up and listen</li>
</ul>
<p>I guess time will tell if I'm more successful with this list than I was in 2018.</p>
 ]]>
        </content:encoded>
      </item>
      <item>
        <title>
        Beginning a new approach to blogging with Eleventy
        </title>
        <dc:creator>
        Hugh Rundle
        </dc:creator>
        <link>
        https://www.hughrundle.net/beginning-a-new-approach-to-blogging-with-eleventy/
        </link>
        <guid isPermaLink="true">https://www.hughrundle.net/beginning-a-new-approach-to-blogging-with-eleventy/</guid>
          <category domain="https://www.hughrundle.net/tag">
          glam blog club
          </category>
          <category domain="https://www.hughrundle.net/tag">
          blogging
          </category>
        <pubDate>Sun, 28 Apr 2019 06:22:34 GMT</pubDate>
        <description>
              <![CDATA[ Notes on why I&#x27;m moving my blog to static site generator Eleventy, and taking a more minimalist approach to publishing. ]]>
        </description>
        <content:encoded>
        <![CDATA[ <p>As foreshadowed in <a href="https://www.hughrundle.net/2018/09/30/the-machine-in-ghost/">my last post</a>, I've now stopped publishing with <a href="https://ghost.org">Ghost</a> and moved to the static site generator <a href="https://11ty.io">Eleventy</a>. I plan to write about some of the more technical aspects of <em>how</em> I did this in a future post, but for this one I want to explain broadly what I've done, and <em>why</em>.</p>
<p>The 'classic' case for, and explanation of, modern static site generators was made <a href="https://www.smashingmagazine.com/2015/11/modern-static-website-generators-next-big-thing/">by Matt Biilmann in Smashing Magazine</a> back in 2015. For Biilmann, it's mostly about performance, but for me it's more about control and a sense that publishing on the web has become far more complicated than it needs to be. As readers of my <a href="https://www.hughrundle.net/tag/marginalia/">Marginalia series</a> may have noticed, I've been reading and listening to a lot of stuff recently about minimal technology, and a <a href="https://brutalist-web.design/">'brutalist' approach to web design</a>. Publishing with a static site generator allows me to control to a much greater degree what's actually getting published, and removes a bunch of technology from the stack needed to get it onto your screen. This means that there are fewer points of failure and less things needing to be patched or upgraded.</p>
<p>Ironically, whilst systems like WordPress and Ghost require more configuration and maintenance than a static site, they also provide less control over the things that matter to me. Some static site generators will be more flexible than others in this regard, but part of the reason I settled on Eleventy is that it provides a very large degree of flexibility and customisation - Zach Leatherman has done a good job of ensuring his system doesn't try to do everything itself, filling a similar niche to <a href="http://www.metalsmith.io/">Metalsmith</a> but a bit less intimidating. There were four specific things I wanted total control over:</p>
<ol>
<li>everything in the HEAD section generally</li>
<li>the <code>referrer</code> meta tag</li>
<li>the meta tags for open graph and twitter images</li>
<li>permalinks</li>
</ol>
<h2>The &lt;head&gt;</h2>
<p>Most web publishing systems provide users, or at least theme creators, the ability to inject tags and scripts into the head, header and/or footer of each page. This is useful, but what's usually not possible is to <em>remove</em> tags that the system itself creates. This may not necessarily sound like a big deal, but it has important ramifications. Firstly, if your system automatically inserts a particular meta tag that has multiple potential values, you have to go with the value chosen by the system designers. Secondly, if they decide to insert a particular script or tag you don't want there at all, there's not much you can do. In the case of Ghost, it does both (if you share my views about best practices in web publishing).</p>
<p>Firstly, Ghost has baked <a href="https://www.ampproject.org/">Google AMP</a> support into the publishing system itself: you can't <em>not</em> publish AMP-friendly posts using Ghost. The AMP site does a good job of hiding the fact that this is a Google project, but most of what you need to know about it is in the headings under <em>About - Who is AMP for?</em>. The four things listed are 'AMP for Publishers', 'AMP for Advertisers', 'AMP for Ecommerce' and 'AMP for Ad Tech Platforms'. AMP is sold as a way to improve the reader experience and speed sites up, but 'Ad Tech Platforms' (like Google) <em>are the cause of the problem AMP is allegedly trying to solve</em>. AMP is really about Google gaining more data and more control over publishing, and I want nothing to do with it.</p>
<p>Secondly, Ghost uses the <code>referrer</code> meta tag with the content attribute set to <code>no-referrer-when-downgrade</code>. This means that any link from an https site to an http site won't pass on the <code>referer</code> header in the http request: but if I link to an https page it still will. I want my referrer tag to be set to <code>no-referrer</code>, for the reasons outlined in <a href="https://go-to-hellman.blogspot.com/2015/06/protect-reader-privacy-with-referrer.html">Eric Hellman's useful post about the privacy implications of the referer header and referrer meta tag</a>. Basically, it's nobody's business if you're reading my blog posts (more on this later).</p>
<h2>Permalinks</h2>
<p>I wrote a little bit about Ghost's strangely forgiving attitude to permalinks in my last post. The particular problem I had when it came to migrating my blog to a static site was that I wanted to maintain all the existing permalinks, but change the URL pattern for any <em>new</em> posts. In systems like WordPress and Ghost this is more or less impossible unless you start mucking around with redirects on the actual webserver. Eleventy allows me to do something pretty cool, however, and it's very simple. Each post is written in a Markdown file, and has 'front matter' at the top with basic metadata. A basic frontmatter section looks like this:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="highlight-line"><span class="token punctuation">---</span></span><br><span class="highlight-line"><span class="token key atrule">layout</span><span class="token punctuation">:</span> post</span><br><span class="highlight-line"><span class="token key atrule">title</span><span class="token punctuation">:</span> Beginning a new approach to blogging with Eleventy</span><br><span class="highlight-line"><span class="token key atrule">author</span><span class="token punctuation">:</span> Hugh Rundle</span><br><span class="highlight-line"><span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'GLAM blog club'</span><span class="token punctuation">,</span> <span class="token string">'blogging'</span><span class="token punctuation">,</span> <span class="token string">'post'</span><span class="token punctuation">]</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token punctuation">---</span></span></code></pre>
<p>With Eleventy you can optionally add a <code>permalink</code> value, which will override any generic rules you have in place regarding how page URLs are created. I wrote a script to extract all my old posts out of Ghost, and among other things it puts the permalink in the frontmatter of the extracted file. This allowed me to avoid breaking old permalinks which use the format <code>YYYY/MM/DD</code> but stop using a dated format for new posts (it seems like unnecessary and ugly cruft when the date is at the top of each post anyway).</p>
<h2>Reducing bloat and trackers</h2>
<p>Given my minor tirade about AMP and commitment to <code>no-referrer</code> above, you may be wondering about tracking scripts. Wordpress.com has an analytics system built in, and when I moved to Ghost I set up my own <a href="https://matomo.org/">Matomo</a> (formerly Piwik) instance. At the time I felt this was a good compromise between my desire to know which pages were most popular on my blog, and my desire not to feed the Google machine with your browsing habits. Even though the stats only go to me, however, having a tracking system is a signal that I think tracking reading habits is normal and reasonable - and also that it's useful. I'm quite doubtful about all three: I literally can't remember when I last checked the stats on my blog or the newCardigan website, which both used my Matomo analytics server until yesterday, and whenever I have looked at them they give me information I already know and can't do anything useful with: my two most popular posts ever were one that was about a lack of investment in and understanding of core technology in librarianship (widely misinterpreted as a post protesting the use of 3D printers) and a post about migrating from WordPress to Ghost. I mean, it's vaguely interesting, but is it worth keeping a PHP application and MySQL server running, and normalising surveillance? Probably not. I hope other people find my blog posts interesting, but I'm usually writing them for me as much as for anyone else.</p>
<p>The other thing about tracking scripts is that they add a bunch of useless bloat to every page. I'm still using two JavaScript libraries (see below) and was slightly worried about this. But the entire minified <code>momentjs</code> library and my single Matomo tracking script are almost identical in size! Removing analytics allowed my to add momentjs basically for 'free'.</p>
<p>The final thing I did to remove a tracking vector I'd inadvertantly added to my Ghost site was to strip out all the script links from embedded tweets. When you 'embed' a tweet, you get some HTML like this:</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>twitter-tweet<span class="token punctuation">"</span></span> <span class="token attr-name">data-lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ltr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Has there ever been a better reason to be divorced by your husband? A gem from the archives, December 1938 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://t.co/x5ULi25vOr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>pic.twitter.com/x5ULi25vOr<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&mdash;">&amp;mdash;</span> Tom D C Roberts (@TomDCRoberts) <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://twitter.com/TomDCRoberts/status/1049914517579321344?ref_src=twsrc%5Etfw<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>October 10, 2018<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">></span></span></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://platform.twitter.com/widgets.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><br><span class="highlight-line"></span></code></pre>
<p>Do you see that down the bottom?<br>
<code>&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</code></p>
<p>That's calling a JavaScript file from Twitter's servers. I have no idea what's in it, or when it might change: and neither do you. But I can't imagine it doesn't have a tracking system built into it. This is one of several reasons I removed 'Tweet this' and 'Post to Facebook' buttons a few years ago, but I somehow forgot that Twitter embeds do this too. I added a little function to my post-extraction script to delete any of these Twitter scripts it found. Conveniently, the HTML without that script works just fine as a blockquote - just a pity they don't use a <code>&lt;cite&gt;</code> tag.</p>
<p>Lastly, I removed the biggest source of bloat: images. This brings me back to my third requirement, which you may have noticed I haven't yet addressed: meta tags for open graph and twitter images. But first things first. Before migrating, I did a speed test of my homepage using Pingdom Tools. My webserver is in Singapore (the nearest point to Australia in the Digital Ocean empire), so there's inevitably going to be a bit of a lag loading pages from here, but my Ghost site was still pretty slow. From Sydney it was calculated to take 3.5 seconds to load, making 37 requests and pulling down a horrendous 3.3MB! The vast majority of that data was images. I've waxed and waned a bit with post images: they're annoying to source, and I'm a fairly text-based thinker, so I don't find images a particularly useful addition to most blog posts - particularly if it's just a header image. On the other hand, they definitely do help to catch my eye when I'm scrolling through social media. What I really wanted was a system that created images that <em>only show up on social media</em>. It turns out there's a way to do that.</p>
<p>I'll save the technical details for a future post, but suffice to say that you can put a reference to an image in a meta tag regardless of whether it's actually displayed on the page. That means you can do this:</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>twitter:image<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>og:image<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://images.unsplash.com/myphoto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span></code></pre>
<p>The image will appear in the little cards that Twitter and Facebook create when you post a link, but the link in <code>content</code> doesn't need to appear anywhere else on the page.</p>
<h2>What's still in</h2>
<p>I haven't quite shrunk my blog down to just HTML and CSS. There are two JavaScript libraries, and two additional scripts I'm still using - but this is all in the service of user ease rather than making it flashy.</p>
<h3>Rubik web font</h3>
<p>I've relied on the system font <code>Tahoma</code> for base text, but to make things slightly more interesting I'm using 'Rubik' for headers. This adds a small amount of extra page load time.</p>
<h3>Bigfoot</h3>
<p><a href="http://www.bigfootjs.com/">Bigfoot</a> is an amazing jQuery plugin that I use for footnotes. The reason I love it so much is that it is so considered and well thought-out. It works by allowing footnotes to function in a 'web way' - instead of having to scroll to the bottom of the screen to read the footnote, Bigfoot inserts a little ellipses<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> instead of the number, and a pop-over when you click or tap on the ellipses, showing the footnote text. The really smart thing, however, is that if you print the page out, Bigfoot basically just switches itself off and the footnotes work the way that is useful in hardcopy.</p>
<h3>flaneur.js</h3>
<p>I wrote a teeny little script to change all the publication dates to relative time (e.g. 'two months ago'). Initially I thought I could do this when pre-processing the page, but then I thought about it for five more seconds and realised that was possibly the dumbest idea I've ever had: it would show the time relative to whenever it was processed, not when you were reading it! The script doesn't have to be big because I'm using <code>momentjs</code>.</p>
<h3>momentjs</h3>
<p>This is a JavaSript library that allows you to manipulate the display and creation of dates. Whilst JavaScript has a built-in <code>Date()</code> constructor, dates are notoriously tricky (once you start to consider timezones, Daylight Saving Time and other weirdness). I also used this to make sure my permalinks showed the correct date, as I described in my last post.</p>
<h3>jQuery</h3>
<p>I really wish I didn't have to include jQuery, but Bigfoot is just too awesome, and it relies on jQuery. At some point in the future I may attempt to recreate the functionality I like about Bigfoot without resorting to jQuery - JavaScript has come a long way in the last few years, and allows some things that simply weren't possible when jQuery was created.</p>
<p>The nice thing about all the JavaScript is that if you turn JavaScript off, everything still works just fine. The only thing that will be different is the post dates will be in slightly unwieldy (but still understandable) ISO formats, and footnotes will ...work like standard HTML footnotes.</p>
<p>So what's the upshot for you, the reader? You get:</p>
<ol>
<li>Enhanced reader privacy, with every tracker I could think of removed from all pages.</li>
<li>A much faster page load</li>
<li>Significantly less data to download</li>
<li>Glorious Brutalist web design</li>
</ol>
<p>Using the Pingdom Tools test I used on the old site, the homepage now makes only 9 requests (all local i.e. requesting files from the same server), takes 1.24 seconds to load, and loads just 176kB. Nice.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>Like this <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
 ]]>
        </content:encoded>
      </item>
      <item>
        <title>
        Going Static Part 2 - RSS Secrets
        </title>
        <dc:creator>
        Hugh Rundle
        </dc:creator>
        <link>
        https://www.hughrundle.net/going-static-part-2/
        </link>
        <guid isPermaLink="true">https://www.hughrundle.net/going-static-part-2/</guid>
          <category domain="https://www.hughrundle.net/tag">
          eleventy
          </category>
          <category domain="https://www.hughrundle.net/tag">
          coding
          </category>
          <category domain="https://www.hughrundle.net/tag">
          rss
          </category>
        <pubDate>Sun, 28 Apr 2019 06:24:26 GMT</pubDate>
        <description>
              <![CDATA[ Writing your own syndication file really *is* simple! ]]>
        </description>
        <content:encoded>
        <![CDATA[ <p>For the second in <a href="/tag/eleventy">my series on migrating this blog to Eleventy</a>, I'm going to take you through creating my RSS feed, and what I learned about RSS and Atom. Regular readers will know I'm a big fan of RSS, but I must admit I didn't really understand how it works until I decided to write my own RSS file. RSS is both both simpler and weirder than I realised. Eleventy actually has <a href="https://github.com/11ty/eleventy-plugin-rss">an RSS plugin</a>, but I decided to roll my own. This was partially because I would have had to fiddle with some code anyway, since the plugin is written in the Liquid templating language instead of Handlebars, but mostly because I wanted to actually understand how an RSS file is constructed and how it works. This post outlines some of the things I learned, but the usual caveat applies: I'm not an expert, and I've probably got some things wrong. If there are any serious mistakes, feel free to let me know on <a href="https://ausglam.space/@hugh">Mastodon</a> or <a href="https://twitter.com/hughrundle">Twitter</a>.</p>
<h2>A (very) brief history</h2>
<p>The first thing we need to get out of the way is that the term 'RSS' is often used to refer to all the various flavours of <a href="https://en.wikipedia.org/wiki/RSS">RSS</a> <em>and</em> the <a href="https://en.wikipedia.org/wiki/Atom_(Web_standard)">Atom Protocol</a> which was an attempt to modernise and replace RSS. Confusing things more, at one point there was effectively <a href="https://web.archive.org/web/20110718034619/http://diveintomark.org/archives/2002/09/06/history_of_the_rss_fork">a fork</a> in the development of RSS, with competing groups releasing different interpretations of RSS with, in one case, competing version numbering. I'm going to write a bit about Atom, but primarily this post is about the RSS protocol.</p>
<p>RSS developed in a fairly free-form way compared to most more recent web protocols. It was originally created at Netscape in 1999, bringing together ideas that had been floating around for a few years, but referring to no broader standards body. Ultimately this looseness is what led to the creation of Atom, but RSS 2.0 is still in very widespread use. Being a librarian, I'm persuaded by the argument that Atom is the better choice - with clear rules, every element properly explained, full <a href="https://en.wikipedia.org/wiki/Namespace">namespacing</a>, and adherence to other standards - but I ended up using RSS 2.0 for my feed. The reason for this was simple: my existing feed from when I was using Ghost is RSS 2.0 and used a permalink of <code>/rss</code>, so I wanted to ensure I didn't break anything currently using my feed.</p>
<h2>But what exactly is RSS?</h2>
<p>The key to understanding the nature of RSS (or Atom for that matter) is to understand that the acronym 'RSS' has stood for three different things over time, and you need to know all of them to get the full picture. Originally it was referred to as <em>RDF Site Summary</em>. The creators of version 0.91 called it <em>Rich Site Summary</em>. Most people, however, know the third term<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> - <em>Really Simple Syndication</em>. If you understand that it is <em>all</em> of these things at the same time, then you can understand how RSS works. An RSS file is, essentially, just a summary of a website. It summarises the site using XML and the Resource Description Framework, enabling a rich ecosystem of independent software applications to parse each RSS file in a standardised way. And by providing the site summary in RDF via an XML file at a permanent URI, web content that is updated frequently can be syndicated. This last one is the thing that confused me for a while. 'Syndication' suggests that the content is pushed out somehow, but that's not how RSS works. An RSS file is simply a static XML document stored at a permanent address. The way RSS feeds are 'syndicated' is that applications periodically send a request to the file's URL, and check to see if it has changed in a particular way since it was last checked.</p>
<h2>Writing an RSS feed</h2>
<p>As I noted above, an RSS feed is simply an XML file. The <a href="http://www.rssboard.org/rss-2-0">RSS 2.0 specification</a> outlines the requirements:</p>
<ul>
<li>conforms to the <a href="http://www.w3.org/TR/REC-xml">XML 1.0 specification</a></li>
<li>has a top-level <code>rss</code> element specifying a <code>version</code> of 2.0</li>
<li>has a single <code>channel</code> element with compulsory sub-elements of <code>title</code>, <code>link</code> and <code>description</code></li>
<li>within the channel element has one or more <code>item</code> elements</li>
<li>within each <code>item</code> element there must be at least one of <code>title</code> or <code>description</code></li>
</ul>
<p>And that's it. A very simple RSS file might look like this:</p>
<pre class="language-xml"><code class="language-xml"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rss</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>channel</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Information Flaneur<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span><span class="token punctuation">></span></span>https://www.hughrundle.net<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>A blog about libraries, computer programming, and the impending end of humanity.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Going Static Part 1 - Messing with your head<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span><span class="token punctuation">></span></span>https://www.hughrundle.net/going-static-part-1/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>channel</span><span class="token punctuation">></span></span></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rss</span><span class="token punctuation">></span></span></span></code></pre>
<p>This is a totally valid RSS feed, but it's unlikely you will ever see something that only uses the bare minimum elements, and if you do so yourself, most RSS readers are likely to be fairly unhappy about it. Let's look at what else we can add:</p>
<h3>Channel</h3>
<ul>
<li>language</li>
<li>copyright</li>
<li>managingEditor</li>
<li>webMaster</li>
<li>pubDate</li>
<li>lastBuildDate</li>
<li>category</li>
<li>generator</li>
<li>docs</li>
<li>cloud</li>
<li>ttl</li>
<li>image</li>
<li>rating</li>
<li>textInput</li>
<li>skipHours</li>
<li>skipDays</li>
</ul>
<h3>Item</h3>
<ul>
<li>description</li>
<li>author</li>
<li>category</li>
<li>comments</li>
<li>enclosure</li>
<li>guid</li>
<li>pubDate</li>
<li>source</li>
</ul>
<p>These are all optional, which is just as well because many of them simply serve as an amusing reminder of how different the World Wide Web was in 2002. We're going to concentrate on a few key elements:</p>
<h3>Channel</h3>
<ul>
<li>description: &quot;Phrase or sentence describing the channel.&quot;</li>
<li>lastBuildDate: &quot;The last time the content of the channel changed.&quot;</li>
<li>ttl: &quot;ttl stands for time to live. It's a number of minutes that indicates how long a channel can be cached before refreshing from the source. This makes it possible for RSS sources to be managed by a file-sharing network such as Gnutella.&quot;<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> (LOL)</li>
</ul>
<p>Description should be a self-evidently useful piece of metadata. The <code>lastBuildDate</code> and <code>ttl</code> elements serve similar purposes to each other, in that they can be used by RSS reader software to process RSS feeds more efficiently by only processing or checking feeds when they are likely to have actually changed.</p>
<h3>Item</h3>
<ul>
<li>description: &quot;The item synopsis.&quot;</li>
<li>category: &quot;Includes the item in one or more categories.&quot;</li>
<li>enclosure: &quot;Describes a media object that is attached to the item.&quot;</li>
<li>pubDate: &quot;Indicates when the item was published.&quot;</li>
<li>guid: &quot;A string that uniquely identifies the item.&quot;</li>
</ul>
<p>The <code>item</code> description <em>should</em> be a synopsis or precis of the content. However, because there is no provision in the RSS spec to include the full <em>content</em> of an article or other item, some feeds place the entire content in <code>description</code>. This is generally considered to be an error, and there are better ways to address this problem, as we will see shortly.</p>
<p>The <code>category</code> element can be used multiple times. So if you have several tags, you'd probably add a separate 'category' element for each tag.</p>
<p>An <code>enclosure</code> element can be used to 'attach' (or 'enclose', like putting it in an envelope) a media file to a feed item, and this single innovation is the basis of podcasting - it's how every podcast makes its way onto listening devices worldwide. Next time you encounter someone pontificating that RSS is dead but podcasting is the future, don't forget to laugh in their face.</p>
<p>The last two elements - pubDate and guid - can both be used by parsers to work out whether or not an item is new to the feed, but <code>guid</code> is more reliable. The specification for <code>guid</code> is a bit weird, because a whilst it should contain a 'global unique identifier', there are no rules at all about the syntax it should have. Often a guid will be the URL of the item, so there is an optional attribute <code>isPermaLink</code> which defaults to 'true'. However, many blogging systems assign a true unique number so that the item can have a stable identifier if the URL changes - in which case <code>isPermaLink</code> will be set to 'false'. The point of the <code>guid</code> is, of course, to help RSS parsers (readers) to identify whether they have already processed the item (e.g. added it to a reading list, queued it in a podcasting app, etc). We'll look more closely at this in a moment.</p>
<h2>Automating</h2>
<p>I can't say I was paying a lot of (any) attention to the RSS specification in the last 1990s and early 2000s - we can't all <a href="https://en.wikipedia.org/wiki/Aaron_Swartz">be child prodigies</a>, after all. But part of the reason for the RSS fork appears to have been a division between those who wanted RSS feeds to be easy for website authors to create 'by hand', and those who wanted them to have more features and be easier for machines to parse. It seems that in the beginning, the intention really was for RSS files to be hand-coded and altered each time a new item was published. This seems completely bonkers to me now, but if you remember what the Web was like 19 years ago, it does make some sense. In a way, the arguments among those laying a claim to the RSS specification reflected broader shifts in how the Web was imagined. The fact that most people writing on the web in 2018 would think it was crazy to manually update their RSS feed, and have no idea how to do it, perhaps says more about what happened to the Web subsequently than whether it was a good idea originally.</p>
<p>In any case, I don't want to manually update an XML file every time I publish a blog post: I want it to happen automatically. Luckily, Eleventy and Handlebars can help me to take care of that. Let's have a look at how it's done. You hopefully remember from <a href="https://www.hughrundle.net/going-static-part-1/">my last post</a> that <a href="https://www.11ty.io/">Eleventy</a> is a static site generator software program, and <a href="https://handlebarsjs.com/">Handlebars</a> is a JavaScript templating language that allows us to use a placeholder in a template, then use that template to generate actual content. So we can write an RSS template like this:</p>
<pre class="language-handlebars"><code class="language-handlebars"><span class="highlight-line"></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rss</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>channel</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">     <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">site</span><span class="token punctuation">.</span><span class="token variable">title</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">     <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">site</span><span class="token punctuation">.</span><span class="token variable">description</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span><span class="token punctuation">></span></span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">site</span><span class="token punctuation">.</span><span class="token variable">root</span><span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generator</span><span class="token punctuation">></span></span>Eleventy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generator</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lastBuildDate</span><span class="token punctuation">></span></span> <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">latestDate</span> <span class="token variable">collections</span><span class="token punctuation">.</span><span class="token variable">post</span><span class="token delimiter punctuation">}}</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lastBuildDate</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ttl</span><span class="token punctuation">></span></span>60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ttl</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">        <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#each</span> <span class="token variable">collections</span><span class="token punctuation">.</span><span class="token variable">rssPosts</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">         <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">title</span><span class="token delimiter punctuation">}}</span></span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#if</span> <span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">subtitle</span><span class="token delimiter punctuation">}}</span></span> - <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">subtitle</span><span class="token delimiter punctuation">}}</span></span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/if</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">         <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">site</span><span class="token punctuation">.</span><span class="token variable">root</span><span class="token delimiter punctuation">}}</span></span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">this</span><span class="token punctuation">.</span><span class="token variable">url</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">        <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#if</span> <span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">guid</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>guid</span> <span class="token attr-name">isPermaLink</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">guid</span><span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>guid</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">        <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">else</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>guid</span> <span class="token attr-name">isPermaLink</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">site</span><span class="token punctuation">.</span><span class="token variable">root</span><span class="token delimiter punctuation">}}</span></span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">this</span><span class="token punctuation">.</span><span class="token variable">url</span><span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>guid</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">        <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/if</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">        <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#if</span> <span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">tags</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">            <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#each</span> <span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">tags</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name">domain</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.hughrundle.net/tag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line">             <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">this</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>category</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">            <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/each</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">        <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/if</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pubDate</span><span class="token punctuation">></span></span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">utc</span> <span class="token variable">date</span><span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pubDate</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">        <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#if</span> <span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">summary</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">          <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">summary</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">        <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">else</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">          <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">site</span><span class="token punctuation">.</span><span class="token variable">description</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">        <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/if</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">      <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/each</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>channel</span><span class="token punctuation">></span></span></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rss</span><span class="token punctuation">></span></span></span><br><span class="highlight-line"></span></code></pre>
<p>We saw all these elements earlier, all we're doing is pulling in the relevant data. I outlined how <code>site</code> works in Part 1, so let's not dwell on that. There are, however, a couple of things that may look a bit weird. Firstly, there's the last build date:</p>
<pre class="language-handlebars"><code class="language-handlebars"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lastBuildDate</span><span class="token punctuation">></span></span> <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">latestDate</span> <span class="token variable">collections</span><span class="token punctuation">.</span><span class="token variable">post</span><span class="token delimiter punctuation">}}</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lastBuildDate</span><span class="token punctuation">></span></span></span></code></pre>
<p>I stole this from the official Eleventy RSS plugin. What we're doing here is using a 'filter', or what would normally be called a 'helper' in Handlebars. It's just a JavaScript function that takes an argument and returns something. In this case, we want to look at all the pages with a 'post' tag (<code>collections.post</code>) and find the most recent publication date:</p>
<pre class="language-js"><code class="language-js"><span class="highlight-line">eleventyConfig<span class="token punctuation">.</span><span class="token function">addFilter</span><span class="token punctuation">(</span><span class="token string">"latestDate"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">posts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> posts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    value <span class="token operator">=</span> posts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>date <span class="token operator">></span> value <span class="token operator">?</span> posts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>date <span class="token punctuation">:</span> value<span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>We return it as a UTC string because the RSS specification requires all dates to be <a href="https://www.w3.org/Protocols/rfc822/">RFC 822</a> compliant. We do the same thing for each item's <code>pubDate</code> except in that case we just want to deal with a single date as the argument so it's simply:</p>
<pre class="language-js"><code class="language-js"><span class="highlight-line"><span class="token comment">// fix dates to UTC for RSS</span></span><br><span class="highlight-line">eleventyConfig<span class="token punctuation">.</span><span class="token function">addHandlebarsHelper</span><span class="token punctuation">(</span><span class="token string">"utc"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">pubDate<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">let</span> utcDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>pubDate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">return</span> utcDate</span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>The other slightly complicated bit is the <code>guid</code> - and that's only because I migrated from Ghost. Ghost uses its own unique ID for each item. So for example my last post published with Ghost had this:</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>guid</span> <span class="token attr-name">isPermaLink</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5bb04e002c9b9a0603b3acaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>guid</span><span class="token punctuation">></span></span></span></code></pre>
<p>This is fine, but I don't want to be creating my own unique IDs for every article when I could just use a permalink.<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> The point of a guid is to make sure RSS readers don't retrieve items twice, so you shouldn't just change them when you migrate to a new system. To resolve this problem, I made sure that my migration script picked up the guid and put it into the front matter for all the posts that came our of Ghost:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="highlight-line"><span class="token key atrule">layout</span><span class="token punctuation">:</span> post<span class="token punctuation">-</span>migrated</span><br><span class="highlight-line"><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">"The machine in Ghost"</span></span><br><span class="highlight-line"><span class="token key atrule">author</span><span class="token punctuation">:</span> hugh</span><br><span class="highlight-line"><span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'ghost'</span><span class="token punctuation">,</span><span class="token string">'GLAM blog club'</span><span class="token punctuation">,</span><span class="token string">'post'</span><span class="token punctuation">]</span></span><br><span class="highlight-line"><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30T08:28:48.000Z</span></span><br><span class="highlight-line"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> 2018/09/30/the<span class="token punctuation">-</span>machine<span class="token punctuation">-</span>in<span class="token punctuation">-</span>ghost/index.html</span><br><span class="highlight-line"><span class="token key atrule">guid</span><span class="token punctuation">:</span> 5bb04e002c9b9a0603b3acaf</span></code></pre>
<p>With that in the data for each old post, I could then add an 'if/else' statement to my RSS feed:</p>
<pre class="language-handlebars"><code class="language-handlebars"><span class="highlight-line"></span><br><span class="highlight-line"><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#if</span> <span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">guid</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>guid</span> <span class="token attr-name">isPermaLink</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">guid</span><span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>guid</span><span class="token punctuation">></span></span></span><br><span class="highlight-line"><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">else</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>guid</span> <span class="token attr-name">isPermaLink</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">site</span><span class="token punctuation">.</span><span class="token variable">root</span><span class="token delimiter punctuation">}}</span></span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">this</span><span class="token punctuation">.</span><span class="token variable">url</span><span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>guid</span><span class="token punctuation">></span></span></span><br><span class="highlight-line"><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/if</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line"></span></code></pre>
<p>Problem solved!</p>
<p>We saw <code>category</code> before, but you may have noticed I've added something. In addition to simply listing each category, it's <a href="http://www.rssboard.org/rss-2-0#ltcategorygtSubelementOfLtitemgt">possible to link to a taxonomy</a> by using the <code>domain</code> attribute. For example, you might have a blog about Australian wildlife and want to restrict yourself to the <a href="https://ala.org.au">Atlas of Living Australia</a> taxonomy. In that case, you would have a <code>domain</code> linking to the root of the taxonomy, and put the entry (the part after the last forward slash) as the category value. For example, here's <a href="https://bie.ala.org.au/species/urn:lsid:biodiversity.org.au:afd.taxon:91c90b44-e9dd-4ce1-a4b5-37d60d59b859">one of my favourite Australian birds</a>:</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name">domain</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://bie.ala.org.au/species<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>urn:lsid:biodiversity.org.au:afd.taxon:91c90b44-e9dd-4ce1-a4b5-37d60d59b859<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>category</span><span class="token punctuation">></span></span></span></code></pre>
<p>Eww, that doesn't look so great, huh? Let's face it, almost nobody actually uses it this way. More likely, you'll have to your own idosyncratic and loosely-structured taxonomy that uses common words or phrases. In Eleventy, you can pretty easily <a href="https://www.11ty.io/docs/quicktips/tag-pages/">create automatic pages for every tag you use</a>, which means we have an inbuilt structure for taxonomy URIs. That allows us to do this:</p>
<pre class="language-handlebars"><code class="language-handlebars"><span class="highlight-line"></span><br><span class="highlight-line"><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#if</span> <span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">tags</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">  <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#each</span> <span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">tags</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name">domain</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.hughrundle.net/tag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line">  <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">this</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>category</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">  <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/each</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line"><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/if</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line"></span></code></pre>
<p>Then if I have a tag called 'eleventy', you know you can find the canonical URL for that term in my *cough* <em>highly structured taxonomy</em> at <a href="https://www.hughrundle.net/tag/eleventy">https://www.hughrundle.net/tag/eleventy</a>. There's an outstanding problem with this when it comes to multi-word terms due to a mis-use of the <code>category</code> element both by me and a lot of other people. According to the RSS Board's <a href="http://www.rssboard.org/rss-profile">official advice</a>:</p>
<blockquote>
<p>The category's value should be a slash-delimited string that identifies a hierarchical position in the taxonomy.</p>
</blockquote>
<p>So if I have a tag called 'GLAM Blog Club', the value of <code>category</code> should be <code>glam-blog-club</code> because the URL for that tag is at https://www.hughrundle.net/tag/glam-blog-club. I didn't realise this until doing some homework for this post, so I will probably rethink how <a href="https://glamblogs.newcardigan.org/">Aus GLAM Blogs</a> deals with tags, and I made a change like this for my RSS feed:</p>
<pre class="language-handlebars"><code class="language-handlebars"><span class="highlight-line"></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name">domain</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.hughrundle.net/tag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line">  <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">slug</span> <span class="token variable">this</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>category</span><span class="token punctuation">></span></span></span><br><span class="highlight-line"></span></code></pre>
<p>You may be tempted to think that <code>author</code> would be a useful element to add to each item. Unfortunately, the Web of 1999 looked a little different to the Web in 2018. The RSS spec tells us that <code>author</code> is for &quot;the email address of the author of the item.&quot; 🙃 Hmm, maybe not. But surely it would be useful to have the author's <em>name</em> in the RSS feed. And you've probably seen items come through on an RSS feed that <em>do</em> have the author's name. So how do we do that? We do it with <em>namespacing</em>.</p>
<h2>Extending RSS with namespaces</h2>
<p>The major reason Atom was invented was as a result of an argument about whether or not RSS should be namespaced. In the end the RSS 2.0 specification settled on a compromise, whereby all the existing RSS elements are <em>not</em> namespaced, but <a href="http://www.rssboard.org/rss-profile#namespace-elements">RSS can be extended with new elements as long as they <em>are</em> namespaced</a> - and in fact this is encouraged. As we'll see, this includes using Atom elements inside RSS2 feeds, which is confusing but perfectly valid. To complete our RSS feed we're going to add three additional elements from outside the RSS2 schema, and also make a couple of changes to clean things up. We're going to add:</p>
<ul>
<li>atom:link</li>
<li>dc:creator</li>
<li>content:encoded</li>
<li>CDATA</li>
<li>another handlebars helper called <code>deXMLify</code></li>
</ul>
<p>The <code>atom:link</code> element is just the <code>link</code> element from Atom, namespaced for use in RSS. You may be wondering why we need to do this, given that RSS already has a <code>link</code> element. Technically we <em>don't</em> need to do it, but <a href="http://www.rssboard.org/rss-profile#namespace-elements-atom-link">it's highly recommended by the RSS Board</a>, because unlike the base RSS elements, Atom allows us to add a relationship attribute of &quot;self&quot; to the link. That allows us to identify the feed's own URL within itself - making the feed more portable. To add a namespace, we need to use a similar technique to the one I described in <a href="https://www.hughrundle.net/going-static-part-1/">Going Static Part 1</a> when I wrote about adding metadata in the &lt;head&gt; element: in this case, we add a reference inside the opening tag of the <code>rss</code> element, using the <a href="https://en.wikipedia.org/wiki/XML_namespace#Namespace_declaration">XML namespace declaration</a>:</p>
<pre class="language-xml"><code class="language-xml"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rss</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>atom</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2005/Atom<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span></code></pre>
<p>Now we can add an atom:link element inside the <code>channel</code> element:</p>
<pre class="language-handlebars"><code class="language-handlebars"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">atom:</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">site</span><span class="token punctuation">.</span><span class="token variable">root</span><span class="token delimiter punctuation">}}</span></span>/rss<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>self<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application/rss+xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span></code></pre>
<p>I mentioned the problem with the native RSS <code>author</code> element, so let's deal with that. In this case, what we want is to use the Dublin Core <code>creator</code> element:</p>
<pre class="language-handlebars"><code class="language-handlebars"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rss</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>dc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://purl.org/dc/elements/1.1/<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>atom</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2005/Atom<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line"></span><br><span class="highlight-line">...</span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dc:</span>creator</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">  <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#if</span> <span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">author</span><span class="token delimiter punctuation">}}</span></span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">author</span><span class="token delimiter punctuation">}}</span></span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">else</span><span class="token delimiter punctuation">}}</span></span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">site</span><span class="token punctuation">.</span><span class="token variable">author</span><span class="token delimiter punctuation">}}</span></span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/if</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dc:</span>creator</span><span class="token punctuation">></span></span></span></code></pre>
<p>Finally, remember we talked about how RSS 2.0 doesn't have an element designed for the actual content of an item in a feed? Well, prepare for your brain to melt. We're going to use the <code>content</code> namespace that was created in the ...RSS 1.0 specification:</p>
<pre class="language-handlebars"><code class="language-handlebars"><div class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rss</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>dc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://purl.org/dc/elements/1.1/<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://purl.org/rss/1.0/modules/content/<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>atom</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2005/Atom<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></div><div class="highlight-line"></div><div class="highlight-line">...</div><div class="highlight-line"></div><div class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">content:</span>encoded</span><span class="token punctuation">></span></span></div><div class="highlight-line"><span class="token cdata">&lt;![CDATA[ <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">&#123;&#123;&#123;</span><span class="token variable">templateContent</span><span class="token delimiter punctuation">&#125;&#125;&#125;</span></span> ]]&gt;</span></div><div class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">content:</span>encoded</span><span class="token punctuation">&gt;</span></span></div></code></pre>
<h2>Cleaning up your XML</h2>
<p>Woah, what is <code>&lt;![CDATA[]]&gt;</code> ‽ In XML markup, there are three characters that are explicitly disallowed: angular brackets<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>, and ampersands<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>. There are also a few other rules about escaping various things that could be interpreted as XML markup when you want them to be treated as literal text. The way to tell XML that everything in a chunk of text is content rather than markup, is to use <code>CDATA</code>. I use it in two places: one you saw above, in <code>content:encoded</code>. The other is in the item <code>description</code> (for a while it was unclear whether this was allowed, but the RSS 2.0 specification makes clear that it is). The final thing we need to clean up is the <code>title</code> and <code>description</code> for the channel. These could have content that might be interpreted as XML. For example, my last post had a subtitle of &quot;Messing with your &lt;head&gt;&quot;. This will break the RSS feed if it's not dealt with. Originally I simply used <code>CDATA</code>, but technically you're not supposed to use any HTML markup in the channel or item titles - they should be 'plain text'. Escaped HTML also looks horrible. Whilst you're allowed to use escaped HTML in item descriptions, it's still somewhat ambigous for channel descriptions. So for all titles, and the channel description, we need to remove the dangerous ampersands and angled brackets. We can use a filter again:</p>
<pre class="language-js"><code class="language-js"><span class="highlight-line">eleventyConfig<span class="token punctuation">.</span><span class="token function">addFilter</span><span class="token punctuation">(</span><span class="token string">"deXMLify"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">let</span> newstring <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/&amp;/g</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[&lt;>]/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token keyword">return</span> newstring</span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>This will change ampersands to 'and', and simply remove any angled brackets. Now in my RSS feed I just use the filter:</p>
<pre class="language-handlebars"><code class="language-handlebars"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span><br><span class="highlight-line"><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">deXMLify</span> <span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">title</span><span class="token delimiter punctuation">}}</span></span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#if</span> <span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">subtitle</span><span class="token delimiter punctuation">}}</span></span> - <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">deXMLify</span> <span class="token variable">data</span><span class="token punctuation">.</span><span class="token variable">subtitle</span><span class="token delimiter punctuation">}}</span></span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/if</span><span class="token delimiter punctuation">}}</span></span></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span></code></pre>
<h1>PURL</h1>
<p>Wow, that was a lot to take in - if you're still reading, congratulations and trust me, it's not quite as complicated as it might sound. Before finishing, I thought I might share one last little thing I discovered. When I was looking at the html <code>head</code> metadata, I noticed that the Dublin Core schema URL starts with http://purl.org, but I didn't really think much about it - I just assumed it was a weird URL associated with Dublin Core for some reason. But then when I was checking my RSS feed again, I noticed that the RSS 1.0 spec (linked for <code>content</code>) <em>also</em> uses http://purl.org. It turns out that 'PURL' stands for &quot;Permanent URL&quot; and it's a service from our good friends the Internet Archive. As far as I can tell, it works basically like a <a href="https://en.wikipedia.org/wiki/Digital_object_identifier">DOI</a> but is intended for exactly the thing we're using it for here: permanent addresses for schema descriptions.</p>
<p>So now you hopefully have learned more than you really wanted to know about making your own RSS feed. The last in this series about moving from Ghost to Eleventy will be about a little tool I made to generate markdown templates and automatically insert a URL to a free-to-use image. While you're waiting for that, why not go and build your own RSS feed from scratch?</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>which is really a 'backronym' <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>http://www.rssboard.org/rss-2-0#ltttlgtSubelementOfLtchannelgt <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>I actually think using a unique ID string is better practice, but ...it's also a pain in the neck and I'm lazy. <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p>i.e. '&lt;' and '&gt;' <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p>'&amp;' <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
 ]]>
        </content:encoded>
      </item>
      <item>
        <title>
        Better out than in - Using web applications to normalise metadata contextually
        </title>
        <dc:creator>
        Hugh Rundle
        </dc:creator>
        <link>
        https://www.hughrundle.net/better-out-than-in/
        </link>
        <guid isPermaLink="true">https://www.hughrundle.net/better-out-than-in/</guid>
          <category domain="https://www.hughrundle.net/tag">
          glam blog club
          </category>
          <category domain="https://www.hughrundle.net/tag">
          rockpool
          </category>
          <category domain="https://www.hughrundle.net/tag">
          metadata
          </category>
        <pubDate>Sun, 28 Apr 2019 06:55:35 GMT</pubDate>
        <description>
              <![CDATA[ Traditionally libraries standardise subject metadata using &#x27;Authority Files&#x27;. For Rockpool - the rewrite of the software running &#x27;Aus GLAM Blogs&#x27; - I&#x27;m trying something different. ]]>
        </description>
        <content:encoded>
        <![CDATA[ <p>Now that <a href="https://www.vala.org.au/events/vala-tech-camp-2019/">VALA Tech Camp</a> is over I have a little more time, and I've made a start on the <a href="https://github.com/hughrun/rockpool/">long-overdue rewrite</a> of the software behind <a href="https://glamblogs.newcardigan.org/">Aus GLAM Blogs</a>. One of the things I noticed quickly after we launched <a href="https://newcardigan.org/category/blogclub/">GLAM Blog Club</a> is that despite nearly all the participants being qualified or student Information Management professionals, compliance with the official tag ('GLAM Blog Club' on the post itself and '#GLAMBlogClub' on social media) was patchy at best. I count at least four different variations in the posts ingested into the <code>Aus GLAM Blogs</code> database. I found this mildly surprising, but the process of writing the software, observing how people interact with Blog Club, and now <em>re</em>-writing the software, has made me think more about how we manage metadata in collecting institutions.</p>
<p>My first and only experience of cataloguing in libraries was, ironically, in my very first library position before I was a qualified librarian. Due almost entirely to the fact that at 22 years of age I was at least a decade younger than any of my colleagues, I was given responsibility for purchasing and cataloguing all the compact discs purchased out of the 'teenage collections' budget. It didn't amount to much, but it did allow me to indulge my tastes in electronic and 'alternative' music using ratepayers' money. Having had approximately one hour of cataloguing training, I was one of the worst cataloguers in library history, but my primary problem was that I wanted our catalogue records to be useful to end-users, and the head of cataloguing wanted my records to be standards-compliant. The case that still sticks in my memory was when I was confronted with the Sigur Rós album <em><a href="https://en.wikipedia.org/wiki/(_)_(album)">()</a></em>. In its original packaging, the album had a removable cover with cutouts of the two parentheses, with the insert completely blank and no title written on the CD itself. I knew that the album was called &quot;()&quot;, but the cataloguing boss wouldn't have it, insisting that the catalogue record must list the title as 'untitled'. My protestations that this would make it impossible to find were given short shrift.</p>
<h1>Never normalise</h1>
<p>I've never stopped thinking about <a href="https://medium.com/on-archivy/how-libraries-can-trump-the-trend-to-make-america-hate-again-8a4170df1906">Jarret Drake's talk at the British Colombia Library Association's 2017 meeting</a> since I first read it. In particular, Drake's exhortation to &quot;never normalize&quot; is shocking in its defiance of the norms of library practice. Drake meant it to be so - for us to wake up to the Fascist possibilities of fitting knowledge into easily connected, neat classifications. Drake explicity called for library and archive workers to resist standardisation of metadata in order to make integration between different systems harder:</p>
<blockquote>
<p>Local languages, taxonomies, and other forms of knowledge that only people within specific communities can decipher might well be a form of resistance in a country where a president not only advocates for a Muslim database but also for “a lot of systems… beyond databases.”<br>
<cite>Jarret Drake - <a href="https://medium.com/on-archivy/how-libraries-can-trump-the-trend-to-make-america-hate-again-8a4170df1906">How libraries can trump the trend to make America hate again</a></cite></p>
</blockquote>
<p>Drake is coming at this from the Archiving tradition, which has always been more interested than librarianship in retaining metadata as it was at the point of accessioning. But this call to 'Never normalise' is both more radical and more progressive than the occassional <a href="https://www.loc.gov/catdir/cpso/illegal-aliens-decision.pdf">moves to change</a> 'offensive' Library of Congress Subject Headings.<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> Emily Drabinski gets to the heart of this in her April 2013 <em>Library Quarterly</em> article, <a href="https://digitalcommons.liu.edu/cgi/viewcontent.cgi?article=1007&amp;context=brooklyn_libfacpubs">Queering the catalogue: Queer Theory and the politics of correction</a>:</p>
<blockquote>
<p>... as we attempt to contain entire fields of knowledge or ways of being in accordance with universalizing systems and structures, we invariably cannot account for knowledges or ways of being that are excess to and discursively produced by those systems ... From a queer perspective, critiques of LCC and LCSH that seek to correct them concede the terms of the knowledge organization project: that a universalizing system of organization and naming is possible and desirable.<br>
<cite>Emily Drabinski - <a href="https://doi.org/10.1086/669547">Queering the catalogue: Queer Theory and the politics of correction</a></cite></p>
</blockquote>
<p>In other words: the problem isn't particular cataloguing terms, but rather the idea that the world can be described using a single, universal ontology. Patrick McKenzie's (in)famous 2010 blog post <a href="https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/">Falsehoods programmers believe about names</a> describes the problem of metadata normalisation from a different perspective, dispensing with theory to simply describe all the ways humans can be wrong in their assumptions about personally naming other individual humans, assuming only that individual humans are the final arbiters of what their own name(s) is.</p>
<h1>All data is cooked</h1>
<p>Nick Barrowman reminds us in Issue 56 of <em>The New Atlantis</em> that <a href="https://www.thenewatlantis.com/publications/why-data-is-never-raw">far from ever being raw, &quot;all data is cooked&quot;</a>. If we return to the problem I initially outlined - tags for GLAM Blog Club blog posts - this is evident in several different ways. Firstly, these descriptive tags have been decided upon by the author of each post, for reasons particular to them. Some authors, like <a href="https://musingsofableedingheart.tumblr.com/">Nik McGrath</a>, regularly use a large number of tags representing both the topic of the post and her own relationship to the topic. Nik blogs on Tumblr, where a large number of very specific tags helps to make posts visible to other Tumblr users. When I <a href="https://www.hughrundle.net/beginning-a-new-approach-to-blogging-with-eleventy/">migrated my blog publishing software to Eleventy</a>, on the other hand, I radically reduced the number of tags I use, because I wanted my tag pages to be meaningful with a reasonable number of posts per topic. Neither of these approaches is 'correct' - they are simply different metadata strategies to suit the needs and functions of each blogging platform and our particular personal tastes. Nik has her recipe and I have mine.</p>
<p>Blogging software also requires or changes topic tags. For example, Eleventy and some other blogging software uses tags to distinguish between <em>posts</em> and <em>pages</em>, which means all of my posts have a tag 'post'. This is not particularly meaningful in the context of the Aus GLAM Blogs database, since everything in it is assumed to be a 'post', but it's needed by my system so that the item appears in the RSS feed. Likewise, due to an error in my understanding of <a href="http://www.rssboard.org/rss-2-0#ltcategorygtSubelementOfLtitemgt">the RSS specification for item categories</a>, I initially set up my blogging system to hyphenate tags with spaces - so all my old posts about GLAM Blog Club have a tag of <code>GLAM-Blog-Club</code>. Given my exasperation about the inability of the Australian GLAM community to use a single, specified tag for the GLAM Blog Club, the irony is not lost on me. WordPress also notably creates an 'uncategorized' tag automatically for posts that don't have any tags or categories.</p>
<h1>Better out than in</h1>
<p>So what to do when designing an interface for searching and browsing blogs from the GLAM community? The approach I've ultimately decided upon is, in some ways, the inverse of a classic library Authority File. I haven't completely taken on Jarret Drake's advice to 'never normalise' because I will continue to downcase tags before ingesting them into the database. But that is the only change the system will make to blog data on the way into the database. Keeping tags intact within the database is important to me - it respects the choices of blog authors, and leaves the data unchanged for any future analysis or usage for reasons other than what I'm using it for. But at the same time, for the purpose <em>Aus GLAM Blogs</em> is designed for, 'system' tags like 'post' and 'uncategorized' are just noise, and <em>glamblogclub</em>, <em>glam blog club</em> and <em>glam-blog-club</em> are obviously equivalent. So rather than normalising and standardising tags on the way <em>in</em> to the database - which is essentially what an 'authority file' amounts to - the system will do some light standardisation on the way <em>out</em> of the database before hitting the search/browse results interface. This leaves the original-recipe tags in the database, whilst reheating them a little for the purposes of search and display.<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p>
<p>Most of this process lives in a single <code>if</code> statement:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// normalise tag if there is a tag</span></span><br><span class="highlight-line"><span class="token keyword">if</span> <span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token keyword">in</span> settings<span class="token punctuation">.</span>tag_transforms<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> tag<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// if tag is in the special tags from settings.tag_transforms</span></span><br><span class="highlight-line">      tag <span class="token operator">=</span> settings<span class="token punctuation">.</span>tag_transforms<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token comment">// replace it with the specified replacement value</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token comment">// if tag includes any spaces or punctuation, replace with '.*'</span></span><br><span class="highlight-line">  <span class="token comment">// this creates something akin to a LIKE search in SQL</span></span><br><span class="highlight-line">  punctuation <span class="token operator">=</span> <span class="token regex">/[\s!@#$%^&amp;*()_=+\\|\]\[\}\{\-?\/\.>,&lt;;:~`'"]/gi</span></span><br><span class="highlight-line">  tag <span class="token operator">=</span> <span class="token template-string"><span class="token string">`.*</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tag<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>punctuation<span class="token punctuation">,</span> <span class="token string">'.*'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.*`</span></span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The second part of this statement is a light normalisation of tags to effectively ignore most punctuation. This is primarily aimed at merging together things like <code>multi word tag</code> and <code>multi-word-tag</code>, but will also merge <code>'multi word tag'</code> and <code>multi 'word' tag?</code> and so on. This is done with a simple filter using a regular expression (called 'punctuation'). I'm also trying to make <a href="https://github.com/hughrun/rockpool/">the code</a> re-usable, rather than completely specific to the <em>Aus GLAM Blogs</em> project. So rather than hard-coding things, I've included a couple of settings in a <code>settings.json</code> file:</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line">  <span class="token property">"tag_transforms"</span> <span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token property">"glamblogclub"</span> <span class="token operator">:</span> <span class="token string">"glam blog club"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"#glamblogclub"</span> <span class="token operator">:</span> <span class="token string">"glam blog club"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"blogjune"</span> <span class="token operator">:</span> <span class="token string">"blog june"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"#blogjune"</span> <span class="token operator">:</span> <span class="token string">"blog june"</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token property">"filtered_tags"</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"uncategorized"</span><span class="token punctuation">,</span> <span class="token string">"uncategorised"</span><span class="token punctuation">,</span> <span class="token string">"post"</span><span class="token punctuation">,</span> <span class="token string">"page"</span><span class="token punctuation">]</span></span></code></pre>
<p>The <code>tag_transforms</code> object is a list of key-value pairs where any tag equal to the lefthand value will be changed to the right-hand value when run through the statement shown earlier. <code>filtered_tags</code> is an array of tags that will be suppressed from all tag views. As you can see, <code>tag_transforms</code> in particular is context-specific - but both can be easily adjusted with any installation of the software to match the needs of a particular blogging community. The reason this is needed at all is because the <code>tag.replace</code> method only works if there are spaces or punctuation between words. For a tag like <code>glamblogclub</code> humans who can read English will probably work out that it's equivalent to &quot;glam blog club&quot;, but it's very difficult to programatically identify whether arbitrary strings are a single word or several, and the aim is to keep normalisation as light-touch as possible. <code>tag_transforms</code> allows this to be done in a contextually-relevant way dependent on the needs of the community aggregating their blogs. There is also - as <a href="https://twitter.com/lissertations">a notorious radical metadata librarian</a> pointed out to me - a difference between the 'glam blog club' tag and other user-generated tags. This tag is mandated by a recognised (in this context) authority: <a href="https://newcardigan.org/category/blogclub">newCardigan</a>, and it is reasonable to assume that the slight variations seen in the wild are <em>intended</em> to match the standard for the purposes of identification by newCardigan, even though they don't actually match it. The Blog Club only exists because it was set up by newCardigan and the tags are only there so that the newCardigan community can associate the post with the Club, so in this case it's reasonable to normalise the tags to that standard.</p>
<p>The practical effect of this is that when you do click on a tag in a listed post, if the tags says &quot;#glamblogclub&quot; the browse result will pick up anything that is tagged &quot;#glamblogclub&quot;, &quot;#glamblogclub&quot;, &quot;glam blog club&quot;, &quot;'glam blog club'&quot; and so on, treating them all as the same tag:</p>
<p><img src="/images/2019/glamblogs2.gif" alt="GIF of browsing tags in Rockpool software"></p>
<p>Finally, before displaying tags for each post, we run the tags through a method to filter out anything in the <code>filtered_tags</code> array, and another method to make the listed date relative to the current time (e.g. 'four days ago' - this is another way to leave metadata untouched in the database but display it dynamically for each user in their given context):</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">x<span class="token punctuation">.</span>categories <span class="token operator">=</span> x<span class="token punctuation">.</span>categories<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">tag</span> <span class="token operator">=></span> settings<span class="token punctuation">.</span>filtered_tags<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// filter out system tags</span></span><br><span class="highlight-line">x<span class="token punctuation">.</span>relativeDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// add a relative date on the fly</span></span></code></pre>
<p>None of the processes described here change anything in the database - they are run on the fly and only affect the way the data is <em>displayed</em>. Using the same data, another interface could be designed to display and associate it quite differently. Linked data is supposedly the future answer to these sorts of challenges, but that requires sophisticated and complex markup at the publishing end - pretty unlikely to ever become the norm for self-published material like blogs. These processes to transform tags are not yet in place for the current incarnation of <a href="https://glamblogs.newcardigan.org/">Aus GLAM Blogs</a>, but will appear once I've finished rewriting the software (no promises on when that will be).</p>
<p>So as I stated up the top, this process has made me think a little more about how libraries deal with subject metadata. MaRC, Library of Congress Subject Headings, and pretty much every widely-used classification system all ultimately date to and are based on the assumptions of hardcopy catalogues and linear storage. There is no &quot;update dynamically for each viewer&quot; in a card catalogue. Whilst I'm certainly not the first to have considered these issues and have barely scratched the surface here, there needs to be not just a lot more thought about them, but - importantly - some <em>action</em> at the local level. Decades of centralising data in federated catalogues, fiddling about with 'new' standards that are both impractical and fail to solve the core problems, ceding control of terminology to the weirdest library in the world, and deskilling the workforce clearly hasn't resulted in a good outcome for library users. Cataloguing isn't some arcane irelevance, and library catalogues are still the core tool of the trade. If you care about social justice or representation in libraries, you need to care about library metadata and how it is controlled.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>I have <a href="https://www.hughrundle.net/2015/05/29/burn-it-all-down-2/">previously written</a> about the absurdity of any institution other than the United States Library of Congress using LCSH. <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>Ok I'll stop with the cooking metaphors now. <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
 ]]>
        </content:encoded>
      </item>
      <item>
        <title>
        Marginalia 5 - Solidarity, making space, and ways of understanding
        </title>
        <dc:creator>
        Hugh Rundle
        </dc:creator>
        <link>
        https://www.hughrundle.net/marginalia-5/
        </link>
        <guid isPermaLink="true">https://www.hughrundle.net/marginalia-5/</guid>
          <category domain="https://www.hughrundle.net/tag">
          marginalia
          </category>
        <pubDate>Sun, 05 May 2019 10:34:50 GMT</pubDate>
        <description>
              <![CDATA[ A bumper edition of Marginalia ]]>
        </description>
        <content:encoded>
        <![CDATA[ <h2>Podcasts</h2>
<p>I know you've all been missing my <em><a href="https://www.hughrundle.net/tag/marginalia/">Marginalia</a></em> series terribly, so here's a bumper edition for you.</p>
<p>One of the delights of last year was listening to the podcast <em>Artist in the Archive</em>, and in January this year the latest in the series dropped: <em><a href="https://artistinthearchive.podbean.com/e/episode-8-thirty-one-cylinders/">Thirty One Cylinders</a></em>. This story is amazing and has everything: archivists repairing old media technology, Indigenous language renewal, philosophical discussions about metadata and the balance of recognition vs protecting sacred knowledge, and everyone's favourite topic: the endless problems with international copyright law. Not to be missed.</p>
<p>I was also amazed by the History Lab episode about patternmakers, <em><a href="https://historylab.net/s2ep2-invisible-hands/">Invisible Hands</a></em>. They approach this topic with incredible care, and it's a fascinating world that most of us know nothing about. Patternmakers are the people who make the original casts for basically everything that is mass-produced: from jellybabies to tractor buckets.</p>
<h1>Tech</h1>
<p>I'm a big fan of the work of Mozilla Fellow <a href="http://tinysubversions.com/">Darius Kazemi</a>. Two articles he's written recently outline quite nicely what all the fuss is about the 'decentralised web': what it is, how the various incarnations work, and how they can (or do) interact. Check out <em><a href="https://tinysubversions.com/notes/decentralized-social-networks/">Why I'm excited about decentralized social networks</a></em> and <em><a href="https://blog.datproject.org/2019/03/22/three-protocols-and-a-future-of-the-decentralized-internet/">Three protocols and a future of the decentralized internet</a></em>. One of the cool projects that uses Dat is Beaker Browser - former Beaker worker Tara Vancil explained how it all works in her JSConf talk <a href="https://www.youtube.com/watch?v=rJ_WvfF3FN8">Imagine this: a Web without servers</a>.</p>
<p>Craig Mod also wrote recently (ish) <a href="https://craigmod.com/essays/newsletters/">about the re-emergence in the popular imagination of email as a publishing platform</a>. Of course email newsletters have been around for decades, but there does seem to be a bit of a fresh cycle happening with people independently writing for (they hope) a large audience, off Facebook et al to email newsletters, rather than back to blogs. Even Seb Chan has <a href="https://medium.com/@sebchan/a-new-thing-3f342e191e14">gotten in on the action</a>. I still think RSS is under-appreciated both in terms of how it already 'invisibly' powers a lot more push publishing than people realise, and in terms of how much more it could be used, but email is the classic decentralised communication system that despite Google's best efforts, remains still effectively decentralised.</p>
<p>I've been disappointed by OpenStreetMap's apparent stalling in recent years, and Serge Wroclawski <a href="https://blog.emacsen.net/blog/2018/02/16/osm-is-in-trouble/">has some ideas about why that might have happened</a>. Sarah Bond has another story of volunteer-dependent tech companies behaving badly, declaring that <em><a href="https://hyperallergic.com/480239/a-virtual-reality-app-that-reconstructs-ancient-rome-may-have-exploited-its-developers/">A Virtual Reality App that Reconstructs Ancient Rome May Have Exploited Its Developers</a></em>. Feeling depressed after reading those? Check out how <a href="https://solar.lowtechmagazine.com/2018/09/how-to-build-a-lowtech-website/">Low←Tech magazine built a 100% off-grid solar-powered website</a></p>
<p>Finally, two cool projects academic librarians might be interested in:</p>
<ol>
<li><a href="https://www.chriskrycho.com/2015/academic-markdown-and-citations.html">Academic Markdown and citations: A workflow with Pandoc, BibTEX, and the editor of your choice</a></li>
<li><a href="https://github.com/ryregier/crosspull">Crosspull: Python code that pulls metadata for every publication in Crossref that lists a specific institution in it's author affiliations</a></li>
</ol>
<h1>Librarianship</h1>
<p>Meredith Farkas wrote <em><a href="https://meredith.wolfwater.com/wordpress/2018/06/28/devaluing-the-mls-vs-respect-for-all-library-workers/">“Devaluing” the MLS vs. respect for all library workers</a></em> shortly after ALA Annual. In it she addresses credentialism and solidarity in the profession. Farkas refers to a widely-held &quot;sense of our profession being under seige&quot;, and attempts to restrict entry for those without reognised qualifications - &quot;...frankly, that attitude makes me ill.&quot; But <a href="https://journal.radicallibrarianship.org/index.php/journal/article/view/25/37">Sam Popowich takes a broader view</a> (CW: Marxism) in the Journal of Radical Librarianship<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>, arguing that this kind of protectionism is inevitable because of the 'double bind of capitalistic relations' pitting workers against each other. This article may seem a little intimidating at first, but I found it quite clarifying - if not particularly hopeful. One thing I personally think might help at least a bit with the issues Popowich outlines is <a href="https://kovenjsmith.com/post/the-values-of-museum-technology/">wresting control of our technologies away from the market</a>, as Koven Smith suggests in relation to museums, but <em>Low←Tech magazine</em> seems to agree more or less with Popowich, reminding us more broadly that, <em><a href="https://solar.lowtechmagazine.com/2018/07/we-cant-do-it-ourselves.html">We can't do it ourselves</a></em>. For a different perspective combining Popowich's concerns about worker solidarity, and Low←Tech's points about impending climate doom, check out Miriam Lang's <em><a href="http://unevenearth.org/2018/03/the-migration-crisis-and-the-imperial-mode-of-living/">The migration crisis and the imperial mode of living: Notes toward a degrowth internationalism</a></em></p>
<p>If radical politics is your thing, you might also be interested in Jared Davidson's article on <a href="https://overland.org.au/2018/11/must-watch-for-bolshevism-the-untold-history-of-armistice/">the role of strikes and class conflict in the 1918 Armistice</a>. I'm not holding my breath for that to be highlighted in Australia's <a href="https://www.theguardian.com/australia-news/2019/mar/23/war-memorial-expansions-opponents-say-500m-better-spent-on-veterans">$500m ANZAC theme park</a> when the renos are finished.</p>
<h1>Solidarity</h1>
<p>Ian Clarke writes about solidarity of a different kind, in <em><a href="https://medium.com/@ijclark/the-role-of-the-library-in-decolonising-f749a6bc912a">The role of the library in decolonising</a></em>. Clarke argues, essentially, that librarians' reach is further than our grasp on a lot of things:</p>
<blockquote>
<p>It’s very easy as a library worker to over-estimate the centrality of the library within the academy. It is our work and we can seek to imbue it with a degree of importance that is perhaps over-stated.</p>
</blockquote>
<p><cite>Ian Clarke - <a href="https://medium.com/@ijclark/the-role-of-the-library-in-decolonising-f749a6bc912a">The role of the library in decolonising</a></cite></p>
<p>I agree with this sentiment and decolonisation is just one example. However, Clarke is not here to tell you to simply pull your head in and give up. &quot;What the library can do&quot; he tells us, &quot;is help to build <em>connections</em> and <em>solidarity</em>.&quot;</p>
<p>In Meanjin's Autumn edition last year Patrick Stokes wrote about <em><a href="https://meanjin.com.au/essays/the-moral-moment/">The moral moment</a></em>. This introduced me to the philosopher K.E. Løgstrup, who I think I'll want to read at some point:</p>
<blockquote>
<p>For Løgstrup, the source of ethics lies neither in principles nor virtues, but in the simple fact that we find ourselves having power over others, and that this imposes a demand that we act for the other’s sake instead of our own.<br>
<cite>Patrick Stokes - <a href="https://meanjin.com.au/essays/the-moral-moment/">The moral moment</a></cite></p>
</blockquote>
<h1>Making space</h1>
<p>Kim Brillante Knight wrote <a href="https://go-dh.github.io/mincomp/thoughts/2017/02/18/knight-makingspace/">a really interesting article about minimalism, visibility and community</a> in <em>Making space: Feminist DH and a room of one’s own</em>. It was published in 2017 but I only recently came across it. Brillante Knight's article reminded me a little of <a href="https://www.youtube.com/watch?v=XhTzE67HrhE">Bonnie Wildie's LCA2018 talk</a> <em>Wearing access</em>, and the subsequent conversation we had there about <a href="https://www.hughrundle.net/2018/01/29/generous-glam/">'Generous GLAM'</a>.</p>
<p>Also in 2017, <em>In the library with the lead pipe</em> tells us that <a href="http://www.inthelibrarywiththeleadpipe.org/2018/oa-statement/">the University of Western Ontario made space for their entire staff to be involved in a new Open Access statement</a> - resulting in a stronger statement that everyone understood and felt personally invested in.</p>
<p>Scott Young provides <a href="https://desfordiv.library.northeastern.edu/participation-design-empathy-justice-the-user-experience-with-underrepresented-populations-uxup-project/">a really honest and useful retrospective</a> on a Participatory Design pilot project he lead working with Native American students at Montana State University. Kudos to Montana and Northeastern for allowing him to publish such a useful and honest account.</p>
<p>In 1973 André Gorz wrote an article about what cities make space for called <em>The social ideology of the motorcar</em>. Last August <em>Uneven Earth</em> <a href="http://unevenearth.org/2018/08/the-social-ideology-of-the-motorcar/">republished it</a> and depressingly it is still just as relevant as it was when it was first published. On the plus side, <a href="https://www.melbourne.vic.gov.au/news-and-media/Pages/Ten-year-transport-plan-to-create-more-space-for-people.aspx">the City of Melbourne just released a bold plan to transform many CBD streets into shared zones and reduce the speed limit to 30kmh</a>.</p>
<h1>Ways of understanding</h1>
<p>&quot;There is no such thing as an algorithmic decision; there are only ways of seeing decisions as algorithmic.&quot; So says Nick Seaver in <a href="https://journal.culanth.org/index.php/ca/article/view/ca33.3.04/89">a fascinating article</a> in <em>Cultural Anthropology</em>. Meanwhile, Dan McQuillan writes about how &quot;Artificial Intelligence&quot; really works on his blog:</p>
<blockquote>
<p>AI is political. Not only because of the question of what is to be done with it, but because of the political tendecies of the technology itself. The possibilities of AI arise from the resonances between its concrete operations and the surrounding political conditions. By influencing our understanding of what is both possible and desirable it acts in the space between what is and what ought to be.<br>
<cite>Dan McQuillan - <a href="http://danmcquillan.io/ai_and_antifascism.html">Towards an anti-fascist AI</a></cite></p>
</blockquote>
<p>When it comes to humans understanding things, Daniele Procida has written <a href="https://www.divio.com/blog/documentation/">the best thing I've ever read about technical documentation and why it usually sucks</a>. There's also a <a href="https://www.youtube.com/watch?v=t4vKPhjcMZg">video of his talk at Pycon Australia</a> from 2017.</p>
<h1>Wrong about everything</h1>
<p>Last summer Jennifer Mills <a href="https://overland.org.au/previous-issues/issue-233/feature-against-realism/">wrote against realism</a>:</p>
<blockquote>
<p>The compulsion to be realistic shrinks our sense of ourselves as historical actors, as protagonists in our own stories, as agents of change in a functioning democracy. Increasingly at odds with democratic processes, capitalism prefers to show us a funhouse mirror of ourselves as small and ineffectual, and of our organisations as isolated bands, out of touch with ‘the mainstream’, unable to effect change except by turning inward, and preferably by making purchases. The dystopian and the utopian novel both present an interest in collective power that contradicts that model.<br>
<cite>Jennifer Mills - <a href="https://overland.org.au/previous-issues/issue-233/feature-against-realism/">Against realism</a></cite></p>
</blockquote>
<p>Around the same time, Laura Hazard Owen told us that <a href="https://www.niemanlab.org/2018/12/few-people-are-actually-trapped-in-filter-bubbles-why-do-they-like-to-say-that-they-are/">Few people are actually trapped in filter bubbles</a> but we all like to pretend we do for social signalling reasons.</p>
<p>If some of this left you a little depressed, there is some good news: Rutgers University academics tell us that <a href="https://phys.org/news/2018-12-scientific-proof-war-ingrained-human.html">there is no scientific proof that war is ingrained in human nature</a></p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>While we're here, can I mention how frustrating and not-really-very-radical it is for JRL to be publishing all their articles as PDFs? Come on, team, get it together. I'm reading this on the web, gimme HTML. <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
 ]]>
        </content:encoded>
      </item>
      <item>
        <title>
        A highly opinionated taxonomy of librarianship
        </title>
        <dc:creator>
        Hugh Rundle
        </dc:creator>
        <link>
        https://www.hughrundle.net/a-highly-opinionated-taxonomy-of-librarianship/
        </link>
        <guid isPermaLink="true">https://www.hughrundle.net/a-highly-opinionated-taxonomy-of-librarianship/</guid>
          <category domain="https://www.hughrundle.net/tag">
          glam blog club
          </category>
        <pubDate>Sat, 22 Jun 2019 04:51:56 GMT</pubDate>
        <description>
              <![CDATA[ Conservative librarianship asks Who has wisdom? Liberal librarianship asks Who has liberty? Critical librarianship asks Who has representation? But radical librarianship asks Who has power? ]]>
        </description>
        <content:encoded>
        <![CDATA[ <p>The theme for this month's <a href="https://newcardigan.org/category/blogclub/">GLAM Blog Club</a> is 'Radical', and I've had a lot of disjointed ideas about what to write. There's the amazing <a href="https://newcardigan.org/cardicast-episode-53-incendium-radical-library-irl/">Incendium Radical Library</a> newCardigan visited in February. Or <a href="https://kevinseeber.com/capal2019a.pdf">Kevin Seeber's searing take-down of the idea of 'Fake News' and libraries' alleged need to 'fight' it</a>. There's Mudyi's post from November pointing out that <a href="https://archivaldecolonist.com/2018/11/28/diversity-means-disruption/">Diversity means disruption</a>. And there's a lot to be said about continual and enthusiastic consent when it comes to sharing personal data - including about the <em>Australian Common Reader</em> project that was <a href="https://www.theguardian.com/books/2019/jun/18/revolutionary-project-reveals-reading-habits-of-19th-century-working-class-australians">in the news this week</a>. And then yesterday I was reminded of <a href="https://scribepublications.com.au/books-authors/books/trigger-warnings">Jeff Sparrow's ideas about 'smug politics'</a>, which I'd fallen into again. Ultimately, I couldn't string that all into a readable post, so instead I've written a highly opinionated short history of libraries in the English speaking world accompanied by an idiosyncratic taxonomy of librarianship.</p>
<p>I listen to a few podcasts while I'm walking to work or washing the dishes, and my favourite one is the weekly KPFA show <a href="https://kpfa.org/program/against-the-grain/">Against the grain</a>. Every week they talk to a writer, activist or academic (often someone who is all three at once) about radical politics and when C. S. Soong is hosting he always signs off by &quot;suggesting that the important thing is to never stop questioning&quot;.<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> It's good advice, but being the host of a radio show focussed on radical left politics, Soong implies questioning things in a particular way.</p>
<p>The history of public libraries in the English speaking world, for example, is a history of attempts by the rich and middle classes to impose a particular conception of public order and social propriety upon the working classes. The State Library of Victoria originally stocked only non-fiction titles and was intended to be 'improving', whilst many early libraries in settler colonial societies in Australia and the United States were funded by mining companies to keep their workers out of the pubs and saloons.<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> It's also noteworthy that the British <em>Public Libraries Act</em> was passed in 1850 - just two years after the 'year of revolutions' in Europe. The working class needed to be kept busy and distracted from revolutionary thought. Likewise, one only needs a familiarity with the basic ideas in Andrew Carnegie's incredibly patronising book <em>The Gospel of Wealth</em> to understand that his philanthropic donations for the construction of public libraries were intended to direct and control working class people's thinking, rather than simply being a magnanimous gift.</p>
<p>It's important to understand this history - particularly in parts of the world where British imperialism has lasted much longer, as in Australia. But there is of course another related tradition that positions public libraries as vital to informed public and therefore to a functional democracy. Whilst this tradition has its origins in the colonial United States, it is an assumption widely shared by current-day library associations and librarians. It is from this tradition that we have inherited ideas about &quot;the freedom to read&quot; and intellectual freedom as a core library value. These traditions set up a perennial battle most obviously exemplified by 'challenged books', whereby the conservative view of libraries argues that certain books are inappropriate for library collections (though more recently this is primarily couched in terms of what <em>children</em> should be 'exposed to'), whilst what we could call the liberal view of libraries says that it is up to readers to judge and the library is a neutral or objective servant of the broader public.</p>
<p>Then along came <a href="https://en.wikipedia.org/wiki/Critical_theory">postmodern Critical Theory</a> and in its wake, Critical Librarianship (aka CritLib). The CritLib perspective asks not what is <em>allowed</em> in the library collection but rather what (or more to the point, who) is <em>represented</em> in the collection. CritLib is of course broader than this, also asking things like who is represented among library staff, who is proactively made welcome within library spaces, and generally whose perspective is recognised as one that needs to be considered and included in library practice. CritLib is gaining traction, and in Australia we've seen local ALIA branches run Critical Library Schools in Sydney earlier this year and in Brisbane today. I'm excited about this development.</p>
<p>So what is Radical Librarianship? At the Sydney CritLib school, some attendees <a href="https://lissertations.net/post/1035">decided CritLib sounds a bit too American and negative, and wanted to rename their practice Radical Librarianship</a>, but I see these as two separate , though related, ways of looking at the world. Perhaps this is just semantics, but for me at least there's a difference. To think radically is to <em>get to the root</em> (radix) of something. Six years ago Erin Jonaitis made a proposal on Twitter that I still think about regularly:</p>
<blockquote>
<p>&quot;If knowledge is power, then a key part of professional ethics for info professionals should be: Who are you empowering?&quot;</p>
</blockquote>
<p>In some ways, it's the only question in librarianship that matters. Conservative librarianship asks <em>Who has wisdom?</em> Liberal librarianship asks <em>Who has liberty?</em> Critical librarianship asks <em>Who has representation?</em> But radical librarianship asks <em>Who has power?</em></p>
<p>The important thing after that is to never stop questioning.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>I think this might originally be a Mahatma Gandhi quote. <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>I <a href="http://www.inthelibrarywiththeleadpipe.org/2013/what-we-talk-about-when-we-talk-about-public-libraries/">wrote a bit more on this</a> a few years ago in <em>In the library in the lead pipe</em>, and <a href="https://www.theguardian.com/books/2019/jun/18/revolutionary-project-reveals-reading-habits-of-19th-century-working-class-australians">a recent article</a> about <em>The Australian Common Reader</em> notes the same thing in the Australian context. <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
 ]]>
        </content:encoded>
      </item>
  </channel>
</rss>